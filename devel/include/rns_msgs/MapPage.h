// Generated by gencpp from file rns_msgs/MapPage.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_MAPPAGE_H
#define RNS_MSGS_MESSAGE_MAPPAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rns_msgs/MapCell.h>

namespace rns_msgs
{
template <class ContainerAllocator>
struct MapPage_
{
  typedef MapPage_<ContainerAllocator> Type;

  MapPage_()
    : dim(0)
    , size(0)
    , x(0)
    , y(0)
    , cells()  {
    }
  MapPage_(const ContainerAllocator& _alloc)
    : dim(0)
    , size(0)
    , x(0)
    , y(0)
    , cells(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _dim_type;
  _dim_type dim;

   typedef int32_t _size_type;
  _size_type size;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef std::vector< ::rns_msgs::MapCell_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rns_msgs::MapCell_<ContainerAllocator> >::other >  _cells_type;
  _cells_type cells;





  typedef boost::shared_ptr< ::rns_msgs::MapPage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::MapPage_<ContainerAllocator> const> ConstPtr;

}; // struct MapPage_

typedef ::rns_msgs::MapPage_<std::allocator<void> > MapPage;

typedef boost::shared_ptr< ::rns_msgs::MapPage > MapPagePtr;
typedef boost::shared_ptr< ::rns_msgs::MapPage const> MapPageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::MapPage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::MapPage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::MapPage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::MapPage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::MapPage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::MapPage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::MapPage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::MapPage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::MapPage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1508c2bfcad3c0eba674d73046ed9ca3";
  }

  static const char* value(const ::rns_msgs::MapPage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1508c2bfcad3c0ebULL;
  static const uint64_t static_value2 = 0xa674d73046ed9ca3ULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::MapPage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/MapPage";
  }

  static const char* value(const ::rns_msgs::MapPage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::MapPage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 dim					# page dimension, power of 2\n\
int32 size					# page size in pixels. Likely is equal to 2^dim\n\
int32 x						# page X position\n\
int32 y						# page Y position\n\
rns_msgs/MapCell[] cells		# array of cells\n\
\n\
================================================================================\n\
MSG: rns_msgs/MapCell\n\
float32 ax			# accumulated wall X position\n\
float32 ay			# accumulated wall Y position\n\
int32 n				# number of wall occurences\n\
int32 visits		# total number of visits \n\
float32 distance	# array for SDF distance\n\
float32 weight		# array for SDF weight\n\
";
  }

  static const char* value(const ::rns_msgs::MapPage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::MapPage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dim);
      stream.next(m.size);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.cells);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapPage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::MapPage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::MapPage_<ContainerAllocator>& v)
  {
    s << indent << "dim: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dim);
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rns_msgs::MapCell_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_MAPPAGE_H
