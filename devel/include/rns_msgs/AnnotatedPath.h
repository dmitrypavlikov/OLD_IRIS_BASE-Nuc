// Generated by gencpp from file rns_msgs/AnnotatedPath.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_ANNOTATEDPATH_H
#define RNS_MSGS_MESSAGE_ANNOTATEDPATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rns_msgs/Waypoint.h>

namespace rns_msgs
{
template <class ContainerAllocator>
struct AnnotatedPath_
{
  typedef AnnotatedPath_<ContainerAllocator> Type;

  AnnotatedPath_()
    : header()
    , id(0)
    , waypoints()
    , useDirections(false)
    , reversed(false)  {
    }
  AnnotatedPath_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , waypoints(_alloc)
    , useDirections(false)
    , reversed(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::vector< ::rns_msgs::Waypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rns_msgs::Waypoint_<ContainerAllocator> >::other >  _waypoints_type;
  _waypoints_type waypoints;

   typedef uint8_t _useDirections_type;
  _useDirections_type useDirections;

   typedef uint8_t _reversed_type;
  _reversed_type reversed;





  typedef boost::shared_ptr< ::rns_msgs::AnnotatedPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::AnnotatedPath_<ContainerAllocator> const> ConstPtr;

}; // struct AnnotatedPath_

typedef ::rns_msgs::AnnotatedPath_<std::allocator<void> > AnnotatedPath;

typedef boost::shared_ptr< ::rns_msgs::AnnotatedPath > AnnotatedPathPtr;
typedef boost::shared_ptr< ::rns_msgs::AnnotatedPath const> AnnotatedPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::AnnotatedPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::AnnotatedPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::AnnotatedPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::AnnotatedPath_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b1eef100fbebb30331ce40cce8f2f13";
  }

  static const char* value(const ::rns_msgs::AnnotatedPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b1eef100fbebb30ULL;
  static const uint64_t static_value2 = 0x331ce40cce8f2f13ULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/AnnotatedPath";
  }

  static const char* value(const ::rns_msgs::AnnotatedPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
# Path request id. \n\
int32 id\n\
# Actual path\n\
rns_msgs/Waypoint[] waypoints\n\
# Should mover take care of waypoint directions\n\
bool useDirections\n\
# If path is reversed\n\
bool reversed\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: rns_msgs/Waypoint\n\
# Desired position\n\
float32 x\n\
float32 y\n\
# desired direction, in radians\n\
float32 angle\n\
# Max velocity for this waypoint, -1 if no limits\n\
float32 maxVelocity\n\
# Max deviation from this waypoint\n\
float32 maxDeviation\n\
# If target position is relevant\n\
bool useDirection\n\
# Max angle deviation\n\
float32 angleDeviation\n\
";
  }

  static const char* value(const ::rns_msgs::AnnotatedPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.waypoints);
      stream.next(m.useDirections);
      stream.next(m.reversed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnnotatedPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::AnnotatedPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::AnnotatedPath_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rns_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
    s << indent << "useDirections: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useDirections);
    s << indent << "reversed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reversed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_ANNOTATEDPATH_H
