// Generated by gencpp from file rns_msgs/MapInfo.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_MAPINFO_H
#define RNS_MSGS_MESSAGE_MAPINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace rns_msgs
{
template <class ContainerAllocator>
struct MapInfo_
{
  typedef MapInfo_<ContainerAllocator> Type;

  MapInfo_()
    : width(0)
    , height(0)
    , resolution(0.0)
    , pageSize(0)
    , pageDim(0)
    , numPages(0)
    , origin()  {
    }
  MapInfo_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , resolution(0.0)
    , pageSize(0)
    , pageDim(0)
    , numPages(0)
    , origin(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef int32_t _pageSize_type;
  _pageSize_type pageSize;

   typedef int32_t _pageDim_type;
  _pageDim_type pageDim;

   typedef int32_t _numPages_type;
  _numPages_type numPages;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _origin_type;
  _origin_type origin;





  typedef boost::shared_ptr< ::rns_msgs::MapInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::MapInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MapInfo_

typedef ::rns_msgs::MapInfo_<std::allocator<void> > MapInfo;

typedef boost::shared_ptr< ::rns_msgs::MapInfo > MapInfoPtr;
typedef boost::shared_ptr< ::rns_msgs::MapInfo const> MapInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::MapInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::MapInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::MapInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::MapInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::MapInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::MapInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::MapInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::MapInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ca1e2dacff85026a9d6a7c51b48827f";
  }

  static const char* value(const ::rns_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ca1e2dacff85026ULL;
  static const uint64_t static_value2 = 0xa9d6a7c51b48827fULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/MapInfo";
  }

  static const char* value(const ::rns_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::MapInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 width				# Total size in pixels\n\
int32 height			# Total size in pixels\n\
float32 resolution		# Map resolution\n\
int32 pageSize			# Size for every page\n\
int32 pageDim			# Dimension for every page\n\
int32 numPages			# current number of allocated pages\n\
# The origin of the map [m, m, rad].  This is the real-world pose of the\n\
# cell (0,0) in the map.\n\
geometry_msgs/Pose origin\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::rns_msgs::MapInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::MapInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.resolution);
      stream.next(m.pageSize);
      stream.next(m.pageDim);
      stream.next(m.numPages);
      stream.next(m.origin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::MapInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::MapInfo_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "pageSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pageSize);
    s << indent << "pageDim: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pageDim);
    s << indent << "numPages: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numPages);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_MAPINFO_H
