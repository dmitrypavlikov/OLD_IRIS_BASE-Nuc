// Generated by gencpp from file rns_msgs/MapContents.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_MAPCONTENTS_H
#define RNS_MSGS_MESSAGE_MAPCONTENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rns_msgs/MapInfo.h>
#include <rns_msgs/MapPage.h>

namespace rns_msgs
{
template <class ContainerAllocator>
struct MapContents_
{
  typedef MapContents_<ContainerAllocator> Type;

  MapContents_()
    : header()
    , info()
    , pages()  {
    }
  MapContents_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , info(_alloc)
    , pages(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::rns_msgs::MapInfo_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef std::vector< ::rns_msgs::MapPage_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rns_msgs::MapPage_<ContainerAllocator> >::other >  _pages_type;
  _pages_type pages;





  typedef boost::shared_ptr< ::rns_msgs::MapContents_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::MapContents_<ContainerAllocator> const> ConstPtr;

}; // struct MapContents_

typedef ::rns_msgs::MapContents_<std::allocator<void> > MapContents;

typedef boost::shared_ptr< ::rns_msgs::MapContents > MapContentsPtr;
typedef boost::shared_ptr< ::rns_msgs::MapContents const> MapContentsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::MapContents_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::MapContents_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::MapContents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::MapContents_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::MapContents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::MapContents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::MapContents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::MapContents_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::MapContents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7df6b4424f17cea740a310413f98541b";
  }

  static const char* value(const ::rns_msgs::MapContents_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7df6b4424f17cea7ULL;
  static const uint64_t static_value2 = 0x40a310413f98541bULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::MapContents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/MapContents";
  }

  static const char* value(const ::rns_msgs::MapContents_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::MapContents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
rns_msgs/MapInfo info\n\
rns_msgs/MapPage[] pages	# Array of pages, not sorted at all\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: rns_msgs/MapInfo\n\
int32 width				# Total size in pixels\n\
int32 height			# Total size in pixels\n\
float32 resolution		# Map resolution\n\
int32 pageSize			# Size for every page\n\
int32 pageDim			# Dimension for every page\n\
int32 numPages			# current number of allocated pages\n\
# The origin of the map [m, m, rad].  This is the real-world pose of the\n\
# cell (0,0) in the map.\n\
geometry_msgs/Pose origin\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: rns_msgs/MapPage\n\
int32 dim					# page dimension, power of 2\n\
int32 size					# page size in pixels. Likely is equal to 2^dim\n\
int32 x						# page X position\n\
int32 y						# page Y position\n\
rns_msgs/MapCell[] cells		# array of cells\n\
\n\
================================================================================\n\
MSG: rns_msgs/MapCell\n\
float32 ax			# accumulated wall X position\n\
float32 ay			# accumulated wall Y position\n\
int32 n				# number of wall occurences\n\
int32 visits		# total number of visits \n\
float32 distance	# array for SDF distance\n\
float32 weight		# array for SDF weight\n\
";
  }

  static const char* value(const ::rns_msgs::MapContents_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::MapContents_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.info);
      stream.next(m.pages);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapContents_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::MapContents_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::MapContents_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "info: ";
    s << std::endl;
    Printer< ::rns_msgs::MapInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "pages[]" << std::endl;
    for (size_t i = 0; i < v.pages.size(); ++i)
    {
      s << indent << "  pages[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rns_msgs::MapPage_<ContainerAllocator> >::stream(s, indent + "    ", v.pages[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_MAPCONTENTS_H
