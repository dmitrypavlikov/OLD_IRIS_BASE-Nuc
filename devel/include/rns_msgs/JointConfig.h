// Generated by gencpp from file rns_msgs/JointConfig.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_JOINTCONFIG_H
#define RNS_MSGS_MESSAGE_JOINTCONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rns_msgs
{
template <class ContainerAllocator>
struct JointConfig_
{
  typedef JointConfig_<ContainerAllocator> Type;

  JointConfig_()
    : channel(0)
    , P(0.0)
    , I(0.0)
    , D(0.0)
    , rate(0.0)
    , max_velocity(0.0)
    , lower_bound(0.0)
    , upper_bound(0.0)
    , limit_position(false)  {
    }
  JointConfig_(const ContainerAllocator& _alloc)
    : channel(0)
    , P(0.0)
    , I(0.0)
    , D(0.0)
    , rate(0.0)
    , max_velocity(0.0)
    , lower_bound(0.0)
    , upper_bound(0.0)
    , limit_position(false)  {
  (void)_alloc;
    }



   typedef int32_t _channel_type;
  _channel_type channel;

   typedef float _P_type;
  _P_type P;

   typedef float _I_type;
  _I_type I;

   typedef float _D_type;
  _D_type D;

   typedef float _rate_type;
  _rate_type rate;

   typedef float _max_velocity_type;
  _max_velocity_type max_velocity;

   typedef float _lower_bound_type;
  _lower_bound_type lower_bound;

   typedef float _upper_bound_type;
  _upper_bound_type upper_bound;

   typedef uint8_t _limit_position_type;
  _limit_position_type limit_position;





  typedef boost::shared_ptr< ::rns_msgs::JointConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::JointConfig_<ContainerAllocator> const> ConstPtr;

}; // struct JointConfig_

typedef ::rns_msgs::JointConfig_<std::allocator<void> > JointConfig;

typedef boost::shared_ptr< ::rns_msgs::JointConfig > JointConfigPtr;
typedef boost::shared_ptr< ::rns_msgs::JointConfig const> JointConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::JointConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::JointConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::JointConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::JointConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::JointConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::JointConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::JointConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::JointConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::JointConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf64d7b2610d4202b59257f17a594cb0";
  }

  static const char* value(const ::rns_msgs::JointConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf64d7b2610d4202ULL;
  static const uint64_t static_value2 = 0xb59257f17a594cb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::JointConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/JointConfig";
  }

  static const char* value(const ::rns_msgs::JointConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::JointConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message describes joint parameterss\n\
\n\
# Joint channel ID\n\
int32 channel\n\
# Regulator parameters\n\
float32 P\n\
float32 I\n\
float32 D\n\
float32 rate\n\
\n\
# Joint limits\n\
float32 max_velocity\n\
float32 lower_bound\n\
float32 upper_bound\n\
bool limit_position\n\
";
  }

  static const char* value(const ::rns_msgs::JointConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::JointConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channel);
      stream.next(m.P);
      stream.next(m.I);
      stream.next(m.D);
      stream.next(m.rate);
      stream.next(m.max_velocity);
      stream.next(m.lower_bound);
      stream.next(m.upper_bound);
      stream.next(m.limit_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::JointConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::JointConfig_<ContainerAllocator>& v)
  {
    s << indent << "channel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel);
    s << indent << "P: ";
    Printer<float>::stream(s, indent + "  ", v.P);
    s << indent << "I: ";
    Printer<float>::stream(s, indent + "  ", v.I);
    s << indent << "D: ";
    Printer<float>::stream(s, indent + "  ", v.D);
    s << indent << "rate: ";
    Printer<float>::stream(s, indent + "  ", v.rate);
    s << indent << "max_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.max_velocity);
    s << indent << "lower_bound: ";
    Printer<float>::stream(s, indent + "  ", v.lower_bound);
    s << indent << "upper_bound: ";
    Printer<float>::stream(s, indent + "  ", v.upper_bound);
    s << indent << "limit_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.limit_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_JOINTCONFIG_H
