// Generated by gencpp from file rns_msgs/Annotation.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_ANNOTATION_H
#define RNS_MSGS_MESSAGE_ANNOTATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>

namespace rns_msgs
{
template <class ContainerAllocator>
struct Annotation_
{
  typedef Annotation_<ContainerAllocator> Type;

  Annotation_()
    : header()
    , id(0)
    , type(0)
    , revision(0)
    , area()
    , pose()
    , size(0.0)
    , name()
    , tags()
    , origin()
    , description()
    , restricted(false)
    , userdataID(0)  {
    }
  Annotation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , type(0)
    , revision(0)
    , area(_alloc)
    , pose(_alloc)
    , size(0.0)
    , name(_alloc)
    , tags(_alloc)
    , origin(_alloc)
    , description(_alloc)
    , restricted(false)
    , userdataID(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _id_type;
  _id_type id;

   typedef int32_t _type_type;
  _type_type type;

   typedef int64_t _revision_type;
  _revision_type revision;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _area_type;
  _area_type area;

   typedef  ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef float _size_type;
  _size_type size;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _tags_type;
  _tags_type tags;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _origin_type;
  _origin_type origin;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef uint8_t _restricted_type;
  _restricted_type restricted;

   typedef int64_t _userdataID_type;
  _userdataID_type userdataID;



  enum {
    AnnotationTypePoint = 1,
    AnnotationTypeLine = 2,
    AnnotationTypePoly = 3,
  };


  typedef boost::shared_ptr< ::rns_msgs::Annotation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::Annotation_<ContainerAllocator> const> ConstPtr;

}; // struct Annotation_

typedef ::rns_msgs::Annotation_<std::allocator<void> > Annotation;

typedef boost::shared_ptr< ::rns_msgs::Annotation > AnnotationPtr;
typedef boost::shared_ptr< ::rns_msgs::Annotation const> AnnotationConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::Annotation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::Annotation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::Annotation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::Annotation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::Annotation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::Annotation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::Annotation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::Annotation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::Annotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "768cdd2486d1c0fc2ffd237521ff906f";
  }

  static const char* value(const ::rns_msgs::Annotation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x768cdd2486d1c0fcULL;
  static const uint64_t static_value2 = 0x2ffd237521ff906fULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::Annotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/Annotation";
  }

  static const char* value(const ::rns_msgs::Annotation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::Annotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Standard header\n\
std_msgs/Header header\n\
# Annotation ID. It should be unique\n\
int64 id\n\
\n\
int32 AnnotationTypePoint = 1 #;    /// Single point\n\
int32 AnnotationTypeLine = 2 #;     /// Polyline\n\
int32 AnnotationTypePoly = 3 #;     /// FilledPolygon\n\
\n\
int32 type # one of types described in constants\n\
\n\
int64 revision\n\
\n\
geometry_msgs/Polygon area\n\
# Central pose\n\
geometry_msgs/PoseWithCovarianceStamped pose\n\
# Annotation size\n\
float32 size\n\
# Annotation name\n\
string name\n\
# Attached tags\n\
string[] tags\n\
# Annotation origin, i.e editor name\n\
string origin\n\
# optional field\n\
string description\n\
# If this area is restricted to move in\n\
bool restricted \n\
# ID for complete userdata. Can be a database index\n\
int64 userdataID\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovarianceStamped\n\
# This expresses an estimated pose with a reference coordinate frame and timestamp\n\
\n\
Header header\n\
PoseWithCovariance pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::rns_msgs::Annotation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::Annotation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.revision);
      stream.next(m.area);
      stream.next(m.pose);
      stream.next(m.size);
      stream.next(m.name);
      stream.next(m.tags);
      stream.next(m.origin);
      stream.next(m.description);
      stream.next(m.restricted);
      stream.next(m.userdataID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Annotation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::Annotation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::Annotation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "revision: ";
    Printer<int64_t>::stream(s, indent + "  ", v.revision);
    s << indent << "area: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.area);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "tags[]" << std::endl;
    for (size_t i = 0; i < v.tags.size(); ++i)
    {
      s << indent << "  tags[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tags[i]);
    }
    s << indent << "origin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.origin);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "restricted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.restricted);
    s << indent << "userdataID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.userdataID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_ANNOTATION_H
