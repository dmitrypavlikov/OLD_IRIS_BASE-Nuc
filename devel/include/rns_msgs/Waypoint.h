// Generated by gencpp from file rns_msgs/Waypoint.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_WAYPOINT_H
#define RNS_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rns_msgs
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : x(0.0)
    , y(0.0)
    , angle(0.0)
    , maxVelocity(0.0)
    , maxDeviation(0.0)
    , useDirection(false)
    , angleDeviation(0.0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , angle(0.0)
    , maxVelocity(0.0)
    , maxDeviation(0.0)
    , useDirection(false)
    , angleDeviation(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _maxVelocity_type;
  _maxVelocity_type maxVelocity;

   typedef float _maxDeviation_type;
  _maxDeviation_type maxDeviation;

   typedef uint8_t _useDirection_type;
  _useDirection_type useDirection;

   typedef float _angleDeviation_type;
  _angleDeviation_type angleDeviation;





  typedef boost::shared_ptr< ::rns_msgs::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::rns_msgs::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::rns_msgs::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::rns_msgs::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4998af0a465e0ce8aaa982a23f3dcffe";
  }

  static const char* value(const ::rns_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4998af0a465e0ce8ULL;
  static const uint64_t static_value2 = 0xaaa982a23f3dcffeULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/Waypoint";
  }

  static const char* value(const ::rns_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Desired position\n\
float32 x\n\
float32 y\n\
# desired direction, in radians\n\
float32 angle\n\
# Max velocity for this waypoint, -1 if no limits\n\
float32 maxVelocity\n\
# Max deviation from this waypoint\n\
float32 maxDeviation\n\
# If target position is relevant\n\
bool useDirection\n\
# Max angle deviation\n\
float32 angleDeviation\n\
";
  }

  static const char* value(const ::rns_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.angle);
      stream.next(m.maxVelocity);
      stream.next(m.maxDeviation);
      stream.next(m.useDirection);
      stream.next(m.angleDeviation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "maxVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.maxVelocity);
    s << indent << "maxDeviation: ";
    Printer<float>::stream(s, indent + "  ", v.maxDeviation);
    s << indent << "useDirection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useDirection);
    s << indent << "angleDeviation: ";
    Printer<float>::stream(s, indent + "  ", v.angleDeviation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_WAYPOINT_H
