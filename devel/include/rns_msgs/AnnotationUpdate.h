// Generated by gencpp from file rns_msgs/AnnotationUpdate.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_ANNOTATIONUPDATE_H
#define RNS_MSGS_MESSAGE_ANNOTATIONUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rns_msgs/Annotation.h>

namespace rns_msgs
{
template <class ContainerAllocator>
struct AnnotationUpdate_
{
  typedef AnnotationUpdate_<ContainerAllocator> Type;

  AnnotationUpdate_()
    : annotations()
    , action(0)
    , revision(0)
    , updated()  {
    }
  AnnotationUpdate_(const ContainerAllocator& _alloc)
    : annotations(_alloc)
    , action(0)
    , revision(0)
    , updated(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rns_msgs::Annotation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rns_msgs::Annotation_<ContainerAllocator> >::other >  _annotations_type;
  _annotations_type annotations;

   typedef int32_t _action_type;
  _action_type action;

   typedef int64_t _revision_type;
  _revision_type revision;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _updated_type;
  _updated_type updated;



  enum {
    ActionAdd = 1,
    ActionSet = 2,
    ActionDelete = 3,
    ActionNotify = 4,
  };


  typedef boost::shared_ptr< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct AnnotationUpdate_

typedef ::rns_msgs::AnnotationUpdate_<std::allocator<void> > AnnotationUpdate;

typedef boost::shared_ptr< ::rns_msgs::AnnotationUpdate > AnnotationUpdatePtr;
typedef boost::shared_ptr< ::rns_msgs::AnnotationUpdate const> AnnotationUpdateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::AnnotationUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80f10fdd382829c5ed2b38f9c244c413";
  }

  static const char* value(const ::rns_msgs::AnnotationUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80f10fdd382829c5ULL;
  static const uint64_t static_value2 = 0xed2b38f9c244c413ULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/AnnotationUpdate";
  }

  static const char* value(const ::rns_msgs::AnnotationUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message contains annotation update\n\
rns_msgs/Annotation[] annotations\n\
\n\
int32 ActionAdd = 1 #;    /// Add new annotations. If they are already exist - they will be modified on server\n\
int32 ActionSet = 2 #;    /// Override whole annotation list\n\
int32 ActionDelete = 3 #; /// Delete annotations that stored in AnnotationsUpdate.annotations array. They are found by their IDs\n\
int32 ActionNotify = 4 #  /// Notify that there are updates for the server\n\
\n\
# takes one of aforementioned values\n\
int32 action\n\
# Current server revision\n\
int64 revision\n\
# List of updated identifiers. Actual meaning corresponds to action type\n\
int64[] updated\n\
================================================================================\n\
MSG: rns_msgs/Annotation\n\
# Standard header\n\
std_msgs/Header header\n\
# Annotation ID. It should be unique\n\
int64 id\n\
\n\
int32 AnnotationTypePoint = 1 #;    /// Single point\n\
int32 AnnotationTypeLine = 2 #;     /// Polyline\n\
int32 AnnotationTypePoly = 3 #;     /// FilledPolygon\n\
\n\
int32 type # one of types described in constants\n\
\n\
int64 revision\n\
\n\
geometry_msgs/Polygon area\n\
# Central pose\n\
geometry_msgs/PoseWithCovarianceStamped pose\n\
# Annotation size\n\
float32 size\n\
# Annotation name\n\
string name\n\
# Attached tags\n\
string[] tags\n\
# Annotation origin, i.e editor name\n\
string origin\n\
# optional field\n\
string description\n\
# If this area is restricted to move in\n\
bool restricted \n\
# ID for complete userdata. Can be a database index\n\
int64 userdataID\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovarianceStamped\n\
# This expresses an estimated pose with a reference coordinate frame and timestamp\n\
\n\
Header header\n\
PoseWithCovariance pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::rns_msgs::AnnotationUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.annotations);
      stream.next(m.action);
      stream.next(m.revision);
      stream.next(m.updated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnnotationUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::AnnotationUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::AnnotationUpdate_<ContainerAllocator>& v)
  {
    s << indent << "annotations[]" << std::endl;
    for (size_t i = 0; i < v.annotations.size(); ++i)
    {
      s << indent << "  annotations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rns_msgs::Annotation_<ContainerAllocator> >::stream(s, indent + "    ", v.annotations[i]);
    }
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "revision: ";
    Printer<int64_t>::stream(s, indent + "  ", v.revision);
    s << indent << "updated[]" << std::endl;
    for (size_t i = 0; i < v.updated.size(); ++i)
    {
      s << indent << "  updated[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.updated[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_ANNOTATIONUPDATE_H
