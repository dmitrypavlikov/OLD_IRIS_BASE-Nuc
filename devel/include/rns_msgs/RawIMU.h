// Generated by gencpp from file rns_msgs/RawIMU.msg
// DO NOT EDIT!


#ifndef RNS_MSGS_MESSAGE_RAWIMU_H
#define RNS_MSGS_MESSAGE_RAWIMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace rns_msgs
{
template <class ContainerAllocator>
struct RawIMU_
{
  typedef RawIMU_<ContainerAllocator> Type;

  RawIMU_()
    : header()
    , acc()
    , gyro()
    , mag()
    , acc_max(0.0)
    , gyro_max(0.0)
    , mag_max(0.0)
    , temperature(0.0)  {
    }
  RawIMU_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , acc(_alloc)
    , gyro(_alloc)
    , mag(_alloc)
    , acc_max(0.0)
    , gyro_max(0.0)
    , mag_max(0.0)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_type;
  _acc_type acc;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _mag_type;
  _mag_type mag;

   typedef double _acc_max_type;
  _acc_max_type acc_max;

   typedef double _gyro_max_type;
  _gyro_max_type gyro_max;

   typedef double _mag_max_type;
  _mag_max_type mag_max;

   typedef double _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::rns_msgs::RawIMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rns_msgs::RawIMU_<ContainerAllocator> const> ConstPtr;

}; // struct RawIMU_

typedef ::rns_msgs::RawIMU_<std::allocator<void> > RawIMU;

typedef boost::shared_ptr< ::rns_msgs::RawIMU > RawIMUPtr;
typedef boost::shared_ptr< ::rns_msgs::RawIMU const> RawIMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rns_msgs::RawIMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rns_msgs::RawIMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rns_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rns_msgs': ['/home/joji/iris_ws/src/rns_msgs/msg', '/home/joji/iris_ws/devel/share/rns_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::RawIMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rns_msgs::RawIMU_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::RawIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rns_msgs::RawIMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::RawIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rns_msgs::RawIMU_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rns_msgs::RawIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c87fe4b60e5265c9c047d884383a8459";
  }

  static const char* value(const ::rns_msgs::RawIMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc87fe4b60e5265c9ULL;
  static const uint64_t static_value2 = 0xc047d884383a8459ULL;
};

template<class ContainerAllocator>
struct DataType< ::rns_msgs::RawIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rns_msgs/RawIMU";
  }

  static const char* value(const ::rns_msgs::RawIMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rns_msgs::RawIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
geometry_msgs/Vector3 acc\n\
geometry_msgs/Vector3 gyro\n\
geometry_msgs/Vector3 mag\n\
\n\
# Max values for acc/gyro/mag\n\
float64 acc_max\n\
float64 gyro_max\n\
float64 mag_max\n\
\n\
# Temperature\n\
float64 temperature\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::rns_msgs::RawIMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rns_msgs::RawIMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.acc);
      stream.next(m.gyro);
      stream.next(m.mag);
      stream.next(m.acc_max);
      stream.next(m.gyro_max);
      stream.next(m.mag_max);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawIMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rns_msgs::RawIMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rns_msgs::RawIMU_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "mag: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.mag);
    s << indent << "acc_max: ";
    Printer<double>::stream(s, indent + "  ", v.acc_max);
    s << indent << "gyro_max: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_max);
    s << indent << "mag_max: ";
    Printer<double>::stream(s, indent + "  ", v.mag_max);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RNS_MSGS_MESSAGE_RAWIMU_H
