# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rns_msgs/MapCell.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MapCell(genpy.Message):
  _md5sum = "62ee396d75bc8a98307908aecc949abe"
  _type = "rns_msgs/MapCell"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 ax			# accumulated wall X position
float32 ay			# accumulated wall Y position
int32 n				# number of wall occurences
int32 visits		# total number of visits 
float32 distance	# array for SDF distance
float32 weight		# array for SDF weight
"""
  __slots__ = ['ax','ay','n','visits','distance','weight']
  _slot_types = ['float32','float32','int32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ax,ay,n,visits,distance,weight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapCell, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.n is None:
        self.n = 0
      if self.visits is None:
        self.visits = 0
      if self.distance is None:
        self.distance = 0.
      if self.weight is None:
        self.weight = 0.
    else:
      self.ax = 0.
      self.ay = 0.
      self.n = 0
      self.visits = 0
      self.distance = 0.
      self.weight = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f2i2f().pack(_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight,) = _get_struct_2f2i2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f2i2f().pack(_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight,) = _get_struct_2f2i2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2i2f = None
def _get_struct_2f2i2f():
    global _struct_2f2i2f
    if _struct_2f2i2f is None:
        _struct_2f2i2f = struct.Struct("<2f2i2f")
    return _struct_2f2i2f
