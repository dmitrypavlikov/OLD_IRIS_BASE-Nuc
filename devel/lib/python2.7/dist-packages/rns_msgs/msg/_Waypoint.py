# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rns_msgs/Waypoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Waypoint(genpy.Message):
  _md5sum = "4998af0a465e0ce8aaa982a23f3dcffe"
  _type = "rns_msgs/Waypoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Desired position
float32 x
float32 y
# desired direction, in radians
float32 angle
# Max velocity for this waypoint, -1 if no limits
float32 maxVelocity
# Max deviation from this waypoint
float32 maxDeviation
# If target position is relevant
bool useDirection
# Max angle deviation
float32 angleDeviation"""
  __slots__ = ['x','y','angle','maxVelocity','maxDeviation','useDirection','angleDeviation']
  _slot_types = ['float32','float32','float32','float32','float32','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,angle,maxVelocity,maxDeviation,useDirection,angleDeviation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.angle is None:
        self.angle = 0.
      if self.maxVelocity is None:
        self.maxVelocity = 0.
      if self.maxDeviation is None:
        self.maxDeviation = 0.
      if self.useDirection is None:
        self.useDirection = False
      if self.angleDeviation is None:
        self.angleDeviation = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.angle = 0.
      self.maxVelocity = 0.
      self.maxDeviation = 0.
      self.useDirection = False
      self.angleDeviation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5fBf().pack(_x.x, _x.y, _x.angle, _x.maxVelocity, _x.maxDeviation, _x.useDirection, _x.angleDeviation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.x, _x.y, _x.angle, _x.maxVelocity, _x.maxDeviation, _x.useDirection, _x.angleDeviation,) = _get_struct_5fBf().unpack(str[start:end])
      self.useDirection = bool(self.useDirection)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5fBf().pack(_x.x, _x.y, _x.angle, _x.maxVelocity, _x.maxDeviation, _x.useDirection, _x.angleDeviation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.x, _x.y, _x.angle, _x.maxVelocity, _x.maxDeviation, _x.useDirection, _x.angleDeviation,) = _get_struct_5fBf().unpack(str[start:end])
      self.useDirection = bool(self.useDirection)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5fBf = None
def _get_struct_5fBf():
    global _struct_5fBf
    if _struct_5fBf is None:
        _struct_5fBf = struct.Struct("<5fBf")
    return _struct_5fBf
