# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rns_msgs/MapPage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rns_msgs.msg

class MapPage(genpy.Message):
  _md5sum = "1508c2bfcad3c0eba674d73046ed9ca3"
  _type = "rns_msgs/MapPage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 dim					# page dimension, power of 2
int32 size					# page size in pixels. Likely is equal to 2^dim
int32 x						# page X position
int32 y						# page Y position
rns_msgs/MapCell[] cells		# array of cells

================================================================================
MSG: rns_msgs/MapCell
float32 ax			# accumulated wall X position
float32 ay			# accumulated wall Y position
int32 n				# number of wall occurences
int32 visits		# total number of visits 
float32 distance	# array for SDF distance
float32 weight		# array for SDF weight
"""
  __slots__ = ['dim','size','x','y','cells']
  _slot_types = ['int32','int32','int32','int32','rns_msgs/MapCell[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dim,size,x,y,cells

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapPage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.dim is None:
        self.dim = 0
      if self.size is None:
        self.size = 0
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.cells is None:
        self.cells = []
    else:
      self.dim = 0
      self.size = 0
      self.x = 0
      self.y = 0
      self.cells = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.dim, _x.size, _x.x, _x.y))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_2f2i2f().pack(_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.dim, _x.size, _x.x, _x.y,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = rns_msgs.msg.MapCell()
        _x = val1
        start = end
        end += 24
        (_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight,) = _get_struct_2f2i2f().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.dim, _x.size, _x.x, _x.y))
      length = len(self.cells)
      buff.write(_struct_I.pack(length))
      for val1 in self.cells:
        _x = val1
        buff.write(_get_struct_2f2i2f().pack(_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cells is None:
        self.cells = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.dim, _x.size, _x.x, _x.y,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cells = []
      for i in range(0, length):
        val1 = rns_msgs.msg.MapCell()
        _x = val1
        start = end
        end += 24
        (_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight,) = _get_struct_2f2i2f().unpack(str[start:end])
        self.cells.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2i2f = None
def _get_struct_2f2i2f():
    global _struct_2f2i2f
    if _struct_2f2i2f is None:
        _struct_2f2i2f = struct.Struct("<2f2i2f")
    return _struct_2f2i2f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
