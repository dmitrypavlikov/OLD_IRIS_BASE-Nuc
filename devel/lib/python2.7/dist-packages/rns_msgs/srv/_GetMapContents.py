# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rns_msgs/GetMapContentsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetMapContentsRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "rns_msgs/GetMapContentsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMapContentsRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rns_msgs/GetMapContentsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import rns_msgs.msg
import std_msgs.msg

class GetMapContentsResponse(genpy.Message):
  _md5sum = "1b81e9a6831ea1bbddfe4258c942c217"
  _type = "rns_msgs/GetMapContentsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """MapContents data

================================================================================
MSG: rns_msgs/MapContents
Header header
rns_msgs/MapInfo info
rns_msgs/MapPage[] pages	# Array of pages, not sorted at all

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: rns_msgs/MapInfo
int32 width				# Total size in pixels
int32 height			# Total size in pixels
float32 resolution		# Map resolution
int32 pageSize			# Size for every page
int32 pageDim			# Dimension for every page
int32 numPages			# current number of allocated pages
# The origin of the map [m, m, rad].  This is the real-world pose of the
# cell (0,0) in the map.
geometry_msgs/Pose origin

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: rns_msgs/MapPage
int32 dim					# page dimension, power of 2
int32 size					# page size in pixels. Likely is equal to 2^dim
int32 x						# page X position
int32 y						# page Y position
rns_msgs/MapCell[] cells		# array of cells

================================================================================
MSG: rns_msgs/MapCell
float32 ax			# accumulated wall X position
float32 ay			# accumulated wall Y position
int32 n				# number of wall occurences
int32 visits		# total number of visits 
float32 distance	# array for SDF distance
float32 weight		# array for SDF weight
"""
  __slots__ = ['data']
  _slot_types = ['rns_msgs/MapContents']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMapContentsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = rns_msgs.msg.MapContents()
    else:
      self.data = rns_msgs.msg.MapContents()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs))
      _x = self.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2if3i7d().pack(_x.data.info.width, _x.data.info.height, _x.data.info.resolution, _x.data.info.pageSize, _x.data.info.pageDim, _x.data.info.numPages, _x.data.info.origin.position.x, _x.data.info.origin.position.y, _x.data.info.origin.position.z, _x.data.info.origin.orientation.x, _x.data.info.origin.orientation.y, _x.data.info.origin.orientation.z, _x.data.info.origin.orientation.w))
      length = len(self.data.pages)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.pages:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.dim, _x.size, _x.x, _x.y))
        length = len(val1.cells)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cells:
          _x = val2
          buff.write(_get_struct_2f2i2f().pack(_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.data is None:
        self.data = rns_msgs.msg.MapContents()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.data.info.width, _x.data.info.height, _x.data.info.resolution, _x.data.info.pageSize, _x.data.info.pageDim, _x.data.info.numPages, _x.data.info.origin.position.x, _x.data.info.origin.position.y, _x.data.info.origin.position.z, _x.data.info.origin.orientation.x, _x.data.info.origin.orientation.y, _x.data.info.origin.orientation.z, _x.data.info.origin.orientation.w,) = _get_struct_2if3i7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.pages = []
      for i in range(0, length):
        val1 = rns_msgs.msg.MapPage()
        _x = val1
        start = end
        end += 16
        (_x.dim, _x.size, _x.x, _x.y,) = _get_struct_4i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cells = []
        for i in range(0, length):
          val2 = rns_msgs.msg.MapCell()
          _x = val2
          start = end
          end += 24
          (_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight,) = _get_struct_2f2i2f().unpack(str[start:end])
          val1.cells.append(val2)
        self.data.pages.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs))
      _x = self.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2if3i7d().pack(_x.data.info.width, _x.data.info.height, _x.data.info.resolution, _x.data.info.pageSize, _x.data.info.pageDim, _x.data.info.numPages, _x.data.info.origin.position.x, _x.data.info.origin.position.y, _x.data.info.origin.position.z, _x.data.info.origin.orientation.x, _x.data.info.origin.orientation.y, _x.data.info.origin.orientation.z, _x.data.info.origin.orientation.w))
      length = len(self.data.pages)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.pages:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.dim, _x.size, _x.x, _x.y))
        length = len(val1.cells)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cells:
          _x = val2
          buff.write(_get_struct_2f2i2f().pack(_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.data is None:
        self.data = rns_msgs.msg.MapContents()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.data.info.width, _x.data.info.height, _x.data.info.resolution, _x.data.info.pageSize, _x.data.info.pageDim, _x.data.info.numPages, _x.data.info.origin.position.x, _x.data.info.origin.position.y, _x.data.info.origin.position.z, _x.data.info.origin.orientation.x, _x.data.info.origin.orientation.y, _x.data.info.origin.orientation.z, _x.data.info.origin.orientation.w,) = _get_struct_2if3i7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.pages = []
      for i in range(0, length):
        val1 = rns_msgs.msg.MapPage()
        _x = val1
        start = end
        end += 16
        (_x.dim, _x.size, _x.x, _x.y,) = _get_struct_4i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cells = []
        for i in range(0, length):
          val2 = rns_msgs.msg.MapCell()
          _x = val2
          start = end
          end += 24
          (_x.ax, _x.ay, _x.n, _x.visits, _x.distance, _x.weight,) = _get_struct_2f2i2f().unpack(str[start:end])
          val1.cells.append(val2)
        self.data.pages.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2if3i7d = None
def _get_struct_2if3i7d():
    global _struct_2if3i7d
    if _struct_2if3i7d is None:
        _struct_2if3i7d = struct.Struct("<2if3i7d")
    return _struct_2if3i7d
_struct_2f2i2f = None
def _get_struct_2f2i2f():
    global _struct_2f2i2f
    if _struct_2f2i2f is None:
        _struct_2f2i2f = struct.Struct("<2f2i2f")
    return _struct_2f2i2f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
class GetMapContents(object):
  _type          = 'rns_msgs/GetMapContents'
  _md5sum = '1b81e9a6831ea1bbddfe4258c942c217'
  _request_class  = GetMapContentsRequest
  _response_class = GetMapContentsResponse
