// Auto-generated. Do not edit!

// (in-package rns_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let AnnotatedPath = require('./AnnotatedPath.js');

//-----------------------------------------------------------

class MoveToFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.recalculation = null;
      this.obstacleIndex = null;
      this.obstacleDistance = null;
      this.waypoint = null;
      this.moverState = null;
      this.msg = null;
      this.path = null;
    }
    else {
      if (initObj.hasOwnProperty('recalculation')) {
        this.recalculation = initObj.recalculation
      }
      else {
        this.recalculation = false;
      }
      if (initObj.hasOwnProperty('obstacleIndex')) {
        this.obstacleIndex = initObj.obstacleIndex
      }
      else {
        this.obstacleIndex = 0;
      }
      if (initObj.hasOwnProperty('obstacleDistance')) {
        this.obstacleDistance = initObj.obstacleDistance
      }
      else {
        this.obstacleDistance = 0.0;
      }
      if (initObj.hasOwnProperty('waypoint')) {
        this.waypoint = initObj.waypoint
      }
      else {
        this.waypoint = 0;
      }
      if (initObj.hasOwnProperty('moverState')) {
        this.moverState = initObj.moverState
      }
      else {
        this.moverState = 0;
      }
      if (initObj.hasOwnProperty('msg')) {
        this.msg = initObj.msg
      }
      else {
        this.msg = '';
      }
      if (initObj.hasOwnProperty('path')) {
        this.path = initObj.path
      }
      else {
        this.path = new AnnotatedPath();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MoveToFeedback
    // Serialize message field [recalculation]
    bufferOffset = _serializer.bool(obj.recalculation, buffer, bufferOffset);
    // Serialize message field [obstacleIndex]
    bufferOffset = _serializer.int32(obj.obstacleIndex, buffer, bufferOffset);
    // Serialize message field [obstacleDistance]
    bufferOffset = _serializer.float32(obj.obstacleDistance, buffer, bufferOffset);
    // Serialize message field [waypoint]
    bufferOffset = _serializer.int32(obj.waypoint, buffer, bufferOffset);
    // Serialize message field [moverState]
    bufferOffset = _serializer.int32(obj.moverState, buffer, bufferOffset);
    // Serialize message field [msg]
    bufferOffset = _serializer.string(obj.msg, buffer, bufferOffset);
    // Serialize message field [path]
    bufferOffset = AnnotatedPath.serialize(obj.path, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MoveToFeedback
    let len;
    let data = new MoveToFeedback(null);
    // Deserialize message field [recalculation]
    data.recalculation = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [obstacleIndex]
    data.obstacleIndex = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [obstacleDistance]
    data.obstacleDistance = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [waypoint]
    data.waypoint = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [moverState]
    data.moverState = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [msg]
    data.msg = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [path]
    data.path = AnnotatedPath.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.msg.length;
    length += AnnotatedPath.getMessageSize(object.path);
    return length + 21;
  }

  static datatype() {
    // Returns string type for a message object
    return 'rns_msgs/MoveToFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'e5d103605c7fc4819d625a164ef95674';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Progress
    bool recalculation
    int32 obstacleIndex
    float32 obstacleDistance
    # Current waypoint, if there is a waypoint path
    int32 waypoint
    # Mover state
    int32 moverState
    # Message for status update
    string msg
    # Current path
    rns_msgs/AnnotatedPath path
    
    ================================================================================
    MSG: rns_msgs/AnnotatedPath
    std_msgs/Header header
    
    # Path request id. 
    int32 id
    # Actual path
    rns_msgs/Waypoint[] waypoints
    # Should mover take care of waypoint directions
    bool useDirections
    # If path is reversed
    bool reversed
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: rns_msgs/Waypoint
    # Desired position
    float32 x
    float32 y
    # desired direction, in radians
    float32 angle
    # Max velocity for this waypoint, -1 if no limits
    float32 maxVelocity
    # Max deviation from this waypoint
    float32 maxDeviation
    # If target position is relevant
    bool useDirection
    # Max angle deviation
    float32 angleDeviation
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MoveToFeedback(null);
    if (msg.recalculation !== undefined) {
      resolved.recalculation = msg.recalculation;
    }
    else {
      resolved.recalculation = false
    }

    if (msg.obstacleIndex !== undefined) {
      resolved.obstacleIndex = msg.obstacleIndex;
    }
    else {
      resolved.obstacleIndex = 0
    }

    if (msg.obstacleDistance !== undefined) {
      resolved.obstacleDistance = msg.obstacleDistance;
    }
    else {
      resolved.obstacleDistance = 0.0
    }

    if (msg.waypoint !== undefined) {
      resolved.waypoint = msg.waypoint;
    }
    else {
      resolved.waypoint = 0
    }

    if (msg.moverState !== undefined) {
      resolved.moverState = msg.moverState;
    }
    else {
      resolved.moverState = 0
    }

    if (msg.msg !== undefined) {
      resolved.msg = msg.msg;
    }
    else {
      resolved.msg = ''
    }

    if (msg.path !== undefined) {
      resolved.path = AnnotatedPath.Resolve(msg.path)
    }
    else {
      resolved.path = new AnnotatedPath()
    }

    return resolved;
    }
};

module.exports = MoveToFeedback;
